description: |
  Insert this job in-line with your standard CircleCI on-hold notification jobs to simulataniously send
  a JetBrains Space notification containing a link to the paused Workflow.
parameters:
  branch_pattern:
    description: |
      A comma separated list of regex matchable branch names.
      Notifications will only be sent if sent from a job from these branches.
      By default ".+" will be used to match all branches. Pattern must match the full string, no partial matches.
    type: string
    default: ".+"
  template:
    description: |
      (optional) By default this job will send the standard "basic_on_hold_1" template.
      In order to use a custom template you must also set this value to an empty string.
    type: string
    default: "basic_on_hold_1"
  custom:
    description: |
      (optional) Enter a custom message template.
      1. Open HTTP API Playground in Space (in the sidebar).
      2. Find "Chats / Channels / Send Message" endpoint and create your message template using UI preview tab.
      3. Insert any desired environment variables.
      4. Paste value of "contents" property here.
    type: string
    default: ""
  channel:
    description: |
      Select name of channel in which to post to. You may include a comma separated list of channel names s if you wish
      to post to multiple channels at once.
      Set the "JB_SPACE_DEFAULT_CHANNEL" environment variable for the default channel.
    type: string
    default: $JB_SPACE_DEFAULT_CHANNEL
  recipient_member:
    description: |
      Select username of member to whom to send notification. You may include a comma separated list of usernames if you
      wish to send notifications to multiple members at once.
      Set the "$JB_SPACE_DEFAULT_RECIPIENT_MEMBER" environment variable for the default recipient member.
    type: string
    default: $JB_SPACE_DEFAULT_RECIPIENT_MEMBER

docker:
  - image: cimg/base:stable
resource_class: small

steps:
  - notify:
      event: always
      template: <<parameters.template>>
      branch_pattern: <<parameters.branch_pattern>>
      custom: <<parameters.custom>>
      channel: <<parameters.channel>>
      recipient_member: <<parameters.recipient_member>>